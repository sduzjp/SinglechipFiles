C51 COMPILER V9.01   ADC0809_SELF                                                          05/17/2020 15:02:09 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE ADC0809_SELF
OBJECT MODULE PLACED IN ADC0809_self.OBJ
COMPILER INVOKED BY: D:\keil_v4\C51\BIN\C51.EXE ADC0809_self.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //ADC0808信号采集自我完成实验：利用LCD1602和ADC0808实现简单的交流信号过零检测与频率分析
   2          //要求信号幅度变化时(满量程的5%-95%)，不影响检测的结果。频率检测的结果通过LCD1602
   3          //的第一行显示出来，信号过零时，能够通过P2.6输出一个脉冲宽度为5us的脉冲信号。
   4          #include "reg51.h"
   5          #include "intrins.h"
   6          #define uint unsigned int
   7          #define uchar unsigned char
   8          
   9          sbit LCD_RS=P2^0;  //定义数据/命令选择位为P2.0引脚
  10          sbit LCD_RW=P2^1;  //定义读/写选择位为P2.1引脚
  11          sbit LCD_EN=P2^2;  //定义使能信号端为P2.2引脚
  12          sbit BF=P1^7;    //定义忙碌标志位，BF为1表示忙碌
  13          sbit CLK=P2^3;  //定义方波产生位为P2.3引脚
  14          sbit Start=P2^4;  //定义开始标志位为P2.4引脚
  15          sbit OE=P2^5;   //定义允许AD读写位为P2.5引脚
  16          sbit Out_pulse=P2^6;  //定义脉冲输出位为P2.6引脚
  17          sbit EOC=P2^7;    //定义转换结束标志位，EOC为1表示AD转换结束
  18          
  19          uchar n=0;        //判断50ms过了多少次变量
  20          uchar flag=0;   //时间间隔1s标志位
  21          
  22          //延时子程序
  23          void delay_ms(uint xms)
  24          {
  25   1              uint i,j;
  26   1              for(i=xms;i>0;i--)
  27   1              {
  28   2                      for(j=110;j>0;j--);
  29   2              }
  30   1      }
  31          
  32          //LCD忙检查子程序
  33          bit lcd_busy()
  34          {
  35   1              bit result;     //忙标志位
  36   1              LCD_RS=0;       //数据/命令选择位置低电平
  37   1              LCD_RW=1;       //读/写选择位置高电平
  38   1              LCD_EN=1;       //使能信号端置高电平
  39   1              _nop_();
  40   1              _nop_();
  41   1              _nop_();
  42   1              _nop_();        //相当于四条nop空指令
  43   1              result=BF;
  44   1              LCD_EN=0;       //使能信号端置低电平，产生下降沿
  45   1              return result;
  46   1      }
  47          
  48          //写命令子程序
  49          void lcd_wcmd(uchar cmd)
  50          {
  51   1              while(lcd_busy());      //判断LCD1604是否忙
  52   1              LCD_RS=0;       //数据/命令选择位置低电平
  53   1              LCD_RW=0;       //读/写选择位置低电平
  54   1              LCD_EN=0;       //使能信号端置低电平
  55   1              _nop_();
C51 COMPILER V9.01   ADC0809_SELF                                                          05/17/2020 15:02:09 PAGE 2   

  56   1              _nop_();
  57   1              P1=cmd;         //将数据送入P1口
  58   1              _nop_();
  59   1              _nop_();
  60   1              _nop_();
  61   1              _nop_();        //相当于四条nop空指令
  62   1              LCD_EN=1;       //使能信号端置高电平
  63   1              _nop_();
  64   1              _nop_();
  65   1              _nop_();
  66   1              _nop_();        //相当于四条nop空指令
  67   1              LCD_EN=0;       //使能信号端置低电平，产生下降沿
  68   1      }
  69          
  70          //写数据子程序
  71          void lcd_wdat(uchar dat)
  72          {
  73   1              while(lcd_busy());      //读忙信号，不忙则向下执行
  74   1              LCD_RS=1;       //选择数据寄存器
  75   1              LCD_RW=0;       //读写位置低电平，写入数据
  76   1              LCD_EN=0;       //使能信号端置低电平
  77   1              _nop_();
  78   1              _nop_();
  79   1              P1=dat;         //将数据送入P1口
  80   1              _nop_();
  81   1              _nop_();
  82   1              _nop_();
  83   1              _nop_();
  84   1              LCD_EN=1;       //使能信号端置高电平
  85   1              _nop_();
  86   1              _nop_();
  87   1              _nop_();
  88   1              _nop_();
  89   1              LCD_EN=0;       //使能信号端置低电平，产生下降沿
  90   1      }
  91          
  92          //LCD初始化子程序
  93          void lcd_init()
  94          {
  95   1              delay_ms(5);
  96   1              lcd_wcmd(0x01);//清除LCD显示内容
  97   1              delay_ms(5);
  98   1              lcd_wcmd(0x06);//移动光标,写入新数据后地址寄存器的内容减1
  99   1              delay_ms(5);
 100   1              lcd_wcmd(0x0c);//显示开，关光标
 101   1              delay_ms(5);             
 102   1              lcd_wcmd(0x38);//16*4显示，5*7点阵
 103   1              delay_ms(15);//等待LCD电源稳定
 104   1      }
 105          
 106          //系统初始化子程序
 107          void systeminit()
 108          {
 109   1              TMOD=0x21;      //设定定时器T1工作在方式2，定时器T0工作在方式1
 110   1              TH1=0xEC;  //50KHZ，设置计数初值，利用T1中断产生CLK信号
 111   1              TL1=0xEC;
 112   1              EA=1;   //开总中断
 113   1              ET1=1;  //开定时器T1中断
 114   1              TR1=1;  //启动中断
 115   1              TH0=0x3C;       //50ms定时
 116   1              TL0=0xB0;
 117   1              ET0=1;   //开定时器T0中断
C51 COMPILER V9.01   ADC0809_SELF                                                          05/17/2020 15:02:09 PAGE 3   

 118   1              TR0=1;   //启动中断
 119   1              Start=0;  //A/D转换启动信号，输入高电平有效
 120   1              OE=0;  //数据输出允许信号，输入高电平有效
 121   1      }
 122          
 123          //计数器0中断服务子程序
 124          void time0() interrupt 1
 125          {
 126   1              ET0=0;  //关中断
 127   1              TH0=0x3C;//设置计时器初值 
 128   1              TL0=0xB0;//50MS定时 
 129   1              n++; 
 130   1              if(n==50)  //1s后flag置1，然后进行频率计算
 131   1              {
 132   2                      flag=1;
 133   2                      n=0;
 134   2              } 
 135   1              ET0=1;  //开中断
 136   1      }
 137          
 138          //定时/计数器1中断服务子程序
 139          void time1() interrupt 3 
 140          { 
 141   1              ET1=0;   //关中断
 142   1              CLK=~CLK;  //CLK信号取反
 143   1              ET1=1;   //开中断
 144   1      } 
 145          
 146          //ADC0808数据采集
 147          uchar ADC_sample()
 148          {
 149   1              uchar temp;             //定义暂存采用数据变量 
 150   1              Start=1;        //启动A/D转换
 151   1              delay_ms(1);
 152   1              Start=0;        //启动信号结束
 153   1              while(!EOC);    //等待AD转换结束  
 154   1              P0=0xff;        //P0口全置1 
 155   1              delay_ms(1); 
 156   1              OE=1;   //打开ADC0808的输出使能允许数据输出
 157   1              temp=P0;        //读取P0口采集数据 
 158   1              OE=0;   //关闭ADC0808的输出使能
 159   1              delay_ms(4);
 160   1              return temp;    //返回采集数据 
 161   1      } 
 162          
 163          //字符显示子程序
 164          void display(uint ch)
 165          {
 166   1              uint num;         //定义暂存字符各位变量
 167   1              lcd_wcmd(0x82);   //设置显示位置为第1行第3列
 168   1              num=ch/10;
 169   1              lcd_wdat(0x30+num);      //显示十位
 170   1      
 171   1              num=ch%10;
 172   1              lcd_wdat(0x30+num);      //显示个位
 173   1      }
 174          
 175          //主程序
 176          void main()
 177          {
 178   1              uint temp1=0,temp2=0;//temp1暂存上次采样数据，temp2暂存本次采样数据
 179   1              uchar frequency=0;      //frequency存频率
C51 COMPILER V9.01   ADC0809_SELF                                                          05/17/2020 15:02:09 PAGE 4   

 180   1              lcd_init();     //LCD初始化
 181   1              delay_ms(5);
 182   1              systeminit();           //系统初始化
 183   1              CLK=0;
 184   1              lcd_wcmd(0x80);  //设置显示位置为第1行第0列
 185   1              lcd_wdat('f');   //输出显示f:
 186   1              lcd_wdat(':');
 187   1              lcd_wcmd(0x84);  //设置显示位置为第1行第6列
 188   1              lcd_wdat('H');   //输出显示HZ
 189   1              lcd_wdat('z');
 190   1              while(1)
 191   1              {
 192   2                      temp2=temp1;
 193   2                      temp2=ADC_sample();      //调用ADC0808数据采样子程序获取采用数据
 194   2                      if(((temp1>=128)&&(temp2<=128))||((temp1<=128)&&(temp2>=128)))//判断采样数据是正数还是负数
 195   2                      {
 196   3                              frequency++;  //出现一次过零点，frequency自增1
 197   3                              Out_pulse=1;
 198   3                              _nop_();
 199   3                              _nop_();
 200   3                              _nop_();
 201   3                              _nop_();
 202   3                              _nop_();   
 203   3                              Out_pulse=0;  //产生5us的脉冲信号
 204   3                      }
 205   2                      if(flag==1)        //1s后计算频率
 206   2                      {
 207   3                              flag=0;
 208   3                              frequency=frequency/2;          //频率为frequency/2
 209   3                              display(frequency);      //显示频率
 210   3                              frequency=0;
 211   3                      }
 212   2              }
 213   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    444    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
